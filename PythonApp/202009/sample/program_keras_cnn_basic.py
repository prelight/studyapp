# -*- coding: utf-8 -*-
"""program-Keras-cnn-basic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13tEeqfif1ym_wYIAKP-53r3wDdbLq9NC
"""

#1 ライブラリのインポートなど
import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Dense, Dropout, Flatten
from keras.optimizers import Adam
import time

#2 画像データの読み込みと、データ形式の設定・正規化
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)
x_train = x_train.astype('float32')/255
x_test = x_test.astype('float32')/255

#3 ラベルデータをOne-hotベクトルに変更
y_train = keras.utils.to_categorical(y_train, 10)
y_test = keras.utils.to_categorical(y_test, 10)

#4 機械学習（人工知能）モデルの作成 
#「Conv2D」を使ってディープラーニング技術でおなじみの「畳み込みニューラルネットワーク」（CNN）を実装
model = Sequential()
model.add(Conv2D(16, (3, 3), padding='same',
          input_shape=(28, 28, 1), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))               
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(Conv2D(256, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))                
model.add(Dropout(0.5))                                   
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.25))                                 
model.add(Dense(10, activation='softmax'))

#5 損失関数・最適化関数・評価関数などを指定してモデルをコンパイル
model.compile(loss='categorical_crossentropy',
              optimizer=Adam(),
              metrics=['accuracy'])

#6 処理を始めた時間
start_time = time.time()

#7 学習の実行
history = model.ﬁt(x_train, y_train, batch_size=1024, epochs=20,
                    verbose=1, validation_data=(x_test, y_test))

#8 モデルの評価
score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])
print('Computation time:{0:.3f} sec'.format(time.time() - start_time))

"""<br><br>
<b>【情報】</b><br>
今回のサンプルコードを理解するために必要な画像認識関連の深層学習プログラミングの知識を学ぶ上で補助教材となりそうな書籍をレビューしておきました。日々の学習の一助になることがありましたら幸いです。
<br>
：<a href="https://child-programmer.com/ai-book-review/">【1周目 - 学習レビュー】Pythonで動かして学ぶ！あたらしい深層学習の教科書 機械学習の基本から深層学習まで（Aidemy公式教科書）by 子供プログラマー</a><br><br>
上記の書籍を読むために必要そうな数式関連の情報をまとめておきました。日々の学習にお役立てください。<br>
：[「Pythonで動かして学ぶ！あたらしい深層学習の教科書 機械学習の基本から深層学習まで」を読むためのギリシャ文字・数学記号 by 子供プログラマー](https://child-programmer.com/ml-book-engineer-math/)
<br><br>

**【最終更新】**2020年3月29日<br>
<br>
記事ページ<br>
サンプルコードの解説も公開しました。
<br>
：【コード解説】畳み込みニューラルネットワーク（CNN）サンプルコード – Colaboratory・Keras・MNIST by 子供プログラマー<br>
https://child-programmer.com/ai/cnn-mnist-basic-samplecode-description/
<br>
<br>
自作画像認識AI用のサンプルコードとコードの解説を公開しました。印刷用のPDFも公開中です。<br>
：【コード解説】自作画像認識AI：Keras・CNN・Pythonオリジナルデータセット対応の機械学習サンプルコード by 子供プログラマー<br>
https://child-programmer.com/ai/cnn-originaldataset-samplecode-description/
<br>
<br>
日本人のための人工知能プログラマー入門講座（機械学習）by 子供プログラマー<br>
https://child-programmer.com/ai/
"""